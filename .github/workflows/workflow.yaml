name: Deploy java container

on:
  push:
    branches: 
      - master
  # workflow_dispatch: 
#      
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn clean install
  #h    
    - name: Static Code Analysis using Sonarqube
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      
    # - name: Nexus Repo Publish
    #   uses: sonatype-nexus-community/nexus-repo-github-action@master
    #   with:
    #     serverUrl: http://52.66.204.144:8081/
    #     username: admin
    #     password: ${{ secrets.NEXUS_PASSWORD }}
    #     format: maven2
    #     repository: maven-releases
    #     coordinates: groupId=com.mkyong artifactId=docker-spring-boot version=1.0
    #     assets: extension=jar
    #     filename: ./target/spring-boot-web.jar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: sg-repo
        IMAGE_TAG: v1
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
       
   
